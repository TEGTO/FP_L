version: '3.4'

services:
  fp_l:
    container_name: fp_l
    image: ${DOCKER_REGISTRY-}fpl
    build:
      context: .
      dockerfile: FP_L/Dockerfile
    environment:
      - CORECLR_ENABLE_PROFILING=1
      - CORECLR_PROFILER={36032161-FFC0-4B61-B559-F6C5D41BAE5A}
      - CORECLR_NEWRELIC_HOME=/usr/local/newrelic-dotnet-agent
      - CORECLR_PROFILER_PATH=/usr/local/newrelic-dotnet-agent/libNewRelicProfiler.so
      - NEW_RELIC_LICENSE_KEY=${NEW_RELIC_LICENSE_KEY}
      - NEW_RELIC_APP_NAME=FP_L
      - NEW_RELIC_REGION=eu
      - NEW_RELIC_LOG_LEVEL=debug
      - DbConnectionString=User ID=user1;Password=12345;Host=fp_l-db;Port=5432;Database=fp_l-db;Pooling=true;MinPoolSize=0;MaxPoolSize=100;ConnectionLifetime=0;TrustServerCertificate=true
    depends_on:
        prometheus:
            condition: service_healthy
        grafana:
            condition: service_healthy

  fp_l-db:
    container_name: fp_l-db
    image: postgres
    restart: always
    ports:
    - "54305:5432"
    environment:
        - POSTGRES_DB=fp_l-db
        - POSTGRES_USER=user1
        - POSTGRES_PASSWORD=12345
  grafana:
    container_name: fp_l_grafana
    image: grafana/grafana:master
    ports:
        - "3000:3000"
    volumes:
        - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
        - ./grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
    depends_on:
        prometheus:
            condition: service_healthy
    healthcheck:
        test: wget -q --tries=1 -O- http://localhost:3000/
        interval: 3s
        timeout: 3s
        retries: 10
        start_period: 10s

  prometheus:
    image: prom/prometheus
    container_name: fp_l_prometheus
    restart: always
    ports:
        - 9090:9090
    volumes:
        - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    healthcheck:
        test: wget -q --tries=1 -O- http://localhost:9090/
        interval: 3s
        timeout: 3s
        retries: 10
        start_period: 10s

  newrelic-infra:
    container_name: newrelic-infra
    image: newrelic/infrastructure:latest
    network_mode: host
    cap_add:
      - SYS_PTRACE
    privileged: true
    pid: host
    environment:
      - NRIA_LICENSE_KEY=${NEW_RELIC_LICENSE_KEY}
    volumes:
      - "/:/host:ro"
      - "/var/run/docker.sock:/var/run/docker.sock"